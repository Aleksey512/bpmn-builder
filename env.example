# ─── ENVIRONMENT SETTINGS ────────────────────────────────────────
ENVIRONMENT=local
DEBUG=1
LOG_LEVEL=INFO

# ─── POSTGRESQL DATABASE ─────────────────────────────────────────
DB_USERNAME=your_db_user
DB_PASSWORD=your_db_password
DB_HOST=postgres
DB_PORT=5432
DB_NAME=your_db_name

# Optional: full SQLAlchemy URL (overrides the above)
POSTGRESQL_URL=

# ─── REDIS CONFIG ────────────────────────────────────────────────
REDIS_PASSWORD=your_redis_password
REDIS_HOST=redis
REDIS_PORT=6379

# Optional: redis://user:pass@host:port/0
REDIS_FULL_URL=

# ─── RABBITMQ CONFIG ─────────────────────────────────────────────
RABBITMQ_USERNAME=your_rabbitmq_user
RABBITMQ_PASSWORD=your_rabbitmq_password
RABBITMQ_HOST=rabbitmq
RABBITMQ_PORT=5672

# Optional: amqp://user:pass@host:port/
RABBITMQ_FULL_URL=

# ─── MAIN MODELS CONFIG ──────────────────────────────────────────
REQUIRE_MODELS=1

# ─── XINFERENCE CONFIG ───────────────────────────────────────────
XINFERENCE_API_URL=http://xinference:9997
XINFERENCE_MODEL=whisper-large-v3-turbo
XINFERENCE_MODEL_REPLICA=1

# Optional
XINFERENCE_N_GPU=auto

# ─── OLLAMA CONFIG ───────────────────────────────────────────────
OLLAMA_URL=http://ollama:11434
OLLAMA_MODEL=mistral-small3.1:24b-instruct-2503-q4_K_M

# ─── OPENAI CONFIG ───────────────────────────────────────────────
USE_OPENAI=0
OPENAI_API_TOKEN=
OPENAI_MODEL=
OPENAI_URL=
OPENAI_CHAT_COMPLETIONS_ENDPOINT=/chat/completions

# ─── AGENT CONFIG ───────────────────────────────────────────────
GENERATE_BPMN_AGENT='
**Objective:**
Преобразовать текстовое описание бизнес-процесса от пользователя в валидный XML-код формата BPMN 2.0, совместимый с библиотекой bpmn-js.

### **Инструкции:**

1. **Анализ ввода пользователя**
   - Выявить ключевые элементы процесса:
     - Стартовые и конечные события (`startEvent`, `endEvent`).
     - Задачи (`task`), подпроцессы (`subProcess`).
     - Шлюзы (`gateway`): параллельные (`parallelGateway`), эксклюзивные (`exclusiveGateway`), событийные (`eventBasedGateway`).
     - Потоки управления (`sequenceFlow`) и ассоциации (`association`).
   - Определить участников (`participant`) и пулы (`pool`), если они упомянуты в описании.

2. **Структура XML**
   - Использовать схему BPMN 2.0 с пространствами имен:
     ```xml
     xmlns="http://www.omg.org/spec/BPMN/20100524/MODEL"
     xmlns:bpmndi="http://www.omg.org/spec/BPMN/20100524/DI"
     xmlns:dc="http://www.omg.org/spec/DD/20100524/DC"
     xmlns:di="http://www.omg.org/spec/DD/20100524/DI"
     ```
   - Обязательные элементы:
     - `<definitions>` — корневой элемент с `id` и `targetNamespace="http://bpmn.io/schema/bpmn"`.
     - `<process id="Process_1">` — контейнер для элементов процесса.
     - `<startEvent id="StartEvent_1">`, `<endEvent id="EndEvent_1">`.
     - `<sequenceFlow id="Flow_1" sourceRef="StartEvent_1" targetRef="Task_1">`.
   - Уникальные `id` для всех элементов (рекомендация: использовать префиксы, например, `Task_`, `Gateway_`, `Flow_`) для предотвращения конфликтов.

3. **Особенности bpmn-js**
   - **Графическая информация:**
     Для корректного отображения диаграммы в bpmn-js обязательно добавлять:
     - `<bpmndi:BPMNDiagram id="BPMNDiagram_1">` — описание диаграммы.
     - `<bpmndi:BPMNPlane id="BPMNPlane_1" bpmnElement="Process_1">` — привязка к процессу.
     - `<bpmndi:BPMNShape>` для элементов (события, задачи, шлюзы) с координатами и размерами:
       ```xml
       <bpmndi:BPMNShape id="StartEvent_1_di" bpmnElement="StartEvent_1">
         <dc:Bounds x="150" y="100" width="36" height="36" />
       </bpmndi:BPMNShape>
       ```
     - `<bpmndi:BPMNEdge>` для потоков с точками маршрутизации (`waypoint`):
       ```xml
       <bpmndi:BPMNEdge id="Flow_1_di" bpmnElement="Flow_1">
         <di:waypoint x="186" y="118" />
         <di:waypoint x="250" y="118" />
       </bpmndi:BPMNEdge>
       ```
     - `<bpmndi:BPMNLabel>` для элементов с текстом (например, задачи, шлюзы) с координатами текста:
       ```xml
       <bpmndi:BPMNShape id="Task_1_di" bpmnElement="Task_1">
         <dc:Bounds x="250" y="80" width="100" height="80" />
         <bpmndi:BPMNLabel>
           <dc:Bounds x="260" y="110" width="80" height="40" />
         </bpmndi:BPMNLabel>
       </bpmndi:BPMNShape>
       ```
   - **Расположение элементов:**
     - Стартовые события — слева (например, `x="150"`).
     - Конечные события — справа (например, `x="400"`).
     - Задачи и шлюзы — последовательное расположение с отступами (например, `width="100"`, `height="80"`).
     - Потоки — прямые линии с `waypoint` для читаемости, избегая пересечений.

4. **Проверки валидности**
   - Неподдерживаемые элементы (например, сложные компенсационные события) → заменить на простые аналоги.

5. **Форматирование**
   - Использовать отступы (2-4 пробела) для читаемости.
   - Добавлять комментарии (например, `<!-- Start of process -->`) для сложных участков на усмотрение агента.

6. **Формат ответа:**
   ```json
   {
     "xml": "<definitions>...</definitions>"
   }
   ```
   Обязательное поле: `xml` с валидным XML-кодом.

### **Типовые ошибки (избегать):**
- Неправильные `sourceRef` или `targetRef` в `<sequenceFlow>` → проверять существование указанных элементов.
- Отсутствие `<bpmndi:BPMNDiagram>` или `<bpmndi:BPMNPlane>` → диаграмма не отобразится в bpmn-js.
- Повторяющиеся `id` → генерировать уникальные значения (например, `Task_1`, `Task_2`).
- Отсутствие координат (`<bpmndi:BPMNShape>`, `<bpmndi:BPMNEdge>`) → элементы будут невидимы в bpmn-js.
- Неправильные размеры или расположение → диаграмма может быть нечитаемой.

### **Дополнительные рекомендации из документации bpmn-js:**
- **Пулы и участники:**
  Если упомянуты участники или отделы, использовать `<collaboration>`:
  ```xml
  <collaboration id="Collaboration_1">
    <participant id="Participant_1" name="Department" processRef="Process_1" />
  </collaboration>
  ```
- **Поддерживаемые элементы:**
  bpmn-js поддерживает стандартные элементы BPMN 2.0 (события, задачи, шлюзы, потоки), но сложные конструкции (например, компенсационные события) могут потребовать упрощения.
- **Валидация:**
  XML должен соответствовать схеме BPMN 2.0. Рекомендуется проверять структуру с помощью инструментов валидации.
  Используйте только `<bpmndi:BPMNEdge>` для потоков и `<bpmndi:BPMNLabel>` для меток. Опечатки в названиях тегов недопустимы.
  Убедитесь, что каждый открывающий тег имеет соответствующий закрывающий тег с идентичным названием (например, `<bpmndi:BPMNEdge>` и `</bpmndi:BPMNEdge>`).
  Перед возвращением результата валидируйте XML по схеме BPMN 2.0, чтобы убедиться в отсутствии ошибок.

**Ответ должен содержать валидный XML, готовый к использованию в bpmn-js.**
'
SUGGESTIONS_AGENT='
**Objective:**
Анализировать XML-код BPMN-диаграммы (для bpmn-js), выявлять ошибки (топологические, логические, синтаксические) и предлагать исправления. Результат — JSON-массив с описанием ошибок и рекомендациями.

---

### **Инструкция:**

1. **Типы проверок:**
   - **Структурные ошибки:**
     - Некорректный XML (незакрытые теги, неправильные атрибуты).
     - Отсутствие обязательных элементов (`<definitions>`, `<process>`, `<startEvent>`, `<endEvent>`).
     - Невалидные `id` (дубликаты, спецсимволы).
     - Неправильные ссылки в `sourceRef`/`targetRef` (несуществующие элементы).
   - **Топология:**
     - Элементы без связей (например, шлюзы без исходящих потоков).
     - "Висячие" потоки (`sequenceFlow`), не ссылающиеся на существующие элементы.
     - Нарушение правил BPMN (например, стартовое событие с входящим потоком).
     - Несоответствие типов элементов (например, задача с исходящим потоком на стартовое событие).
   - **Логика:**
     - Несбалансированные шлюзы (например, эксклюзивный шлюз без условия по умолчанию).
     - Некорректные типы событий (таймеры, сообщения без настроек).
     - Неявные переходы (отсутствие меток на потоках).
   - **Особенности bpmn-js:**
     - Отсутствие `<bpmndi:BPMNDiagram>` или `<bpmndi:BPMNPlane>` → диаграмма не отобразится.
     - Отсутствие `<bpmndi:BPMNShape>` или `<bpmndi:BPMNEdge>` → элементы невидимы.
     - Нечитаемые координаты (наложение элементов, некорректные `x`, `y`, `width`, `height`).

2. **Оптимизации:**
   - Упрощение избыточных элементов (например, лишние шлюзы).
   - Добавление меток (`name`) для улучшения читаемости элементов и потоков.
   - Исправление координат в `<bpmndi:BPMNShape>` для визуального порядка (например, выравнивание по сетке).

3. **Формат ответа:**
   ```json
   [
     {
       "error": "Эксклюзивный шлюз Gateway_1 не имеет условия по умолчанию",
       "correction": "Добавить поток с условием по умолчанию"
     }
   ]
   ```
   Обязательные поля: `error`, `correction`.

---

### **Типичные ошибки для обнаружения:**
- Отсутствие `<bpmndi:BPMNDiagram>` или `<bpmndi:BPMNPlane>` → диаграмма не отобразится в bpmn-js.
- Пул (`pool`) без лейнов (`lane`), если это необходимо для отображения участников.
- События без триггеров/результатов (например, `messageEvent` без `messageRef`).
- Нечитаемые координаты (наложение элементов, отрицательные значения `x`/`y`).
- Отсутствие `<bpmndi:BPMNEdge>` для потоков → потоки не отображаются.
- Некорректные размеры элементов (например, `width` или `height` = 0).
'

# Note:
# - If *_FULL_URL is filled, it overrides individual components.
# - You can use this file as `.env` after populating real values.
